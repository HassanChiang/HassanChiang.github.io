<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>分享之</title>
    <link>https://blog.fenxiangz.com/</link>
    
    <image>
      <url>https://blog.fenxiangz.com/favico.png</url>
      <title>分享之</title>
      <link>https://blog.fenxiangz.com/</link>
    </image>
    
    <atom:link href="https://blog.fenxiangz.com/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>Share everything</description>
    <pubDate>Tue, 24 Nov 2020 13:12:19 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>深入理解JVM-内存模型（jmm）和GC</title>
      <link>https://blog.fenxiangz.com/post/java/advance/2020-06-28_java_jvm.html</link>
      <guid>https://blog.fenxiangz.com/post/java/advance/2020-06-28_java_jvm.html</guid>
      <pubDate>Sat, 27 Jun 2020 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;转载：&lt;a href=&quot;https://www.jianshu.com/p/76959115d486&quot;&gt;https://www.jianshu.com/p/76959115d486&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-CPU和内存的交互&quot;&gt;&lt;a href=&quot;#1-CPU和内</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E8%BF%9B%E9%98%B6/">Java 进阶</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/">垃圾回收</category>
      
      <category domain="https://blog.fenxiangz.com/tags/jvm/">jvm</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/advance/2020-06-28_java_jvm.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>接口性能优化思路</title>
      <link>https://blog.fenxiangz.com/post/java/advance/2020-04-25_java_optimize.html</link>
      <guid>https://blog.fenxiangz.com/post/java/advance/2020-04-25_java_optimize.html</guid>
      <pubDate>Fri, 24 Apr 2020 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h4 id=&quot;1-数据库查询是否有问题，是不是慢查？索引？数据量？&quot;&gt;&lt;a href=&quot;#1-数据库查询是否有问题，是不是慢查？索引？数据量？&quot; class=&quot;headerlink&quot; title=&quot;1. 数据库查询是否有问题，是不是慢查？索引？数据量？&quot;&gt;&lt;/a&gt;1. 数据库查</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E8%BF%9B%E9%98%B6/">Java 进阶</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/">性能优化</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/advance/2020-04-25_java_optimize.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JVM内存结构：堆、栈、方法区</title>
      <link>https://blog.fenxiangz.com/post/java/advance/2019-07-22_java_stack.html</link>
      <guid>https://blog.fenxiangz.com/post/java/advance/2019-07-22_java_stack.html</guid>
      <pubDate>Sun, 21 Jul 2019 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;一、定义 &lt;/p&gt;
&lt;p&gt;1、堆：FIFO队列优先，先进先出。jvm只有一个堆区被所有线程所共享！堆存放在二级缓存中，调用对象的速度相对慢一些，生命周期由虚拟机的垃圾回收机制定。&lt;/p&gt;
&lt;p&gt;2、栈：FILO先进后出，暂存数据的地方。每个线程都包含一个栈区！栈存放在一级缓</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E8%BF%9B%E9%98%B6/">Java 进阶</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/">内存模型</category>
      
      <category domain="https://blog.fenxiangz.com/tags/jvm/">jvm</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/advance/2019-07-22_java_stack.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java8新特性学习-函数式编程</title>
      <link>https://blog.fenxiangz.com/post/java/advance/2019-05-04_java_labmda.html</link>
      <guid>https://blog.fenxiangz.com/post/java/advance/2019-05-04_java_labmda.html</guid>
      <pubDate>Fri, 03 May 2019 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Java8 新引入函数式编程方式，大大的提高了编码效率。本文将对涉及的对象等进行统一的学习及记录。内容包括：Stream/Function/Optional/Consumer。&lt;/p&gt;
&lt;p&gt;首先需要清楚一个概念：函数式接口；它指的是有且只有一个未实现的方法的接口，一般通过</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E8%BF%9B%E9%98%B6/">Java 进阶</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/">函数式编程</category>
      
      <category domain="https://blog.fenxiangz.com/tags/lambda/">lambda</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/advance/2019-05-04_java_labmda.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java 和操作系统交互细节</title>
      <link>https://blog.fenxiangz.com/post/java/advance/2019-03-06_java_os.html</link>
      <guid>https://blog.fenxiangz.com/post/java/advance/2019-03-06_java_os.html</guid>
      <pubDate>Tue, 05 Mar 2019 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;结合-CPU-理解一行-Java-代码是怎么执行的&quot;&gt;&lt;a href=&quot;#结合-CPU-理解一行-Java-代码是怎么执行的&quot; class=&quot;headerlink&quot; title=&quot;结合 CPU 理解一行 Java 代码是怎么执行的&quot;&gt;&lt;/a&gt;结合 CPU 理解一行</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E8%BF%9B%E9%98%B6/">Java 进阶</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/jvm/">jvm</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/">操作系统</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/advance/2019-03-06_java_os.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>从源码的角度再学「Thread」</title>
      <link>https://blog.fenxiangz.com/post/java/basic/2019-01-21_java_thread_source.html</link>
      <guid>https://blog.fenxiangz.com/post/java/basic/2019-01-21_java_thread_source.html</guid>
      <pubDate>Mon, 21 Jan 2019 01:46:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;原创： zhangshaolin &lt;strong&gt;张少林同学&lt;/strong&gt;&lt;br&gt;微信号: zhangshaolin_tonxue&lt;/p&gt;
&lt;p&gt;功能介绍 分享&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E5%9F%BA%E7%A1%80/">Java 基础</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/Java%E7%BA%BF%E7%A8%8B/">Java线程</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E6%BA%90%E7%A0%81/">源码</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/basic/2019-01-21_java_thread_source.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Vert.x - 从零开始变(micro)大拿</title>
      <link>https://blog.fenxiangz.com/post/java/advance/2018-11-05_java_vertx.html</link>
      <guid>https://blog.fenxiangz.com/post/java/advance/2018-11-05_java_vertx.html</guid>
      <pubDate>Sun, 04 Nov 2018 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Clement Escoffier, Julien Viet, 沈勇 译Version 0.6,Dec, 23th, 2017 原文：&lt;a href=&quot;http://escoffier.me/vertx-hol/&quot;&gt;http://escoffier.me/vertx-hol</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E8%BF%9B%E9%98%B6/">Java 进阶</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/">微服务</category>
      
      <category domain="https://blog.fenxiangz.com/tags/Vert-x/">Vert.x</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/advance/2018-11-05_java_vertx.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java8 lambda表达式10个示例</title>
      <link>https://blog.fenxiangz.com/post/java/basic/2017-11-10_java-lambda.html</link>
      <guid>https://blog.fenxiangz.com/post/java/basic/2017-11-10_java-lambda.html</guid>
      <pubDate>Fri, 10 Nov 2017 07:51:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Java 8 刚于几周前发布，日期是2014年3月18日，这次开创性的发布在Java社区引发了不少讨论，并让大家感到激动。特性之一便是随同发布的lambda表达式，它将允许我们将行为传到函数里。在Java 8之前，如果想将行为传入函数，仅有的选择就是匿名类，需要6行代码。而</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E5%9F%BA%E7%A1%80/">Java 基础</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/">lambda表达式</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/basic/2017-11-10_java-lambda.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java 引用</title>
      <link>https://blog.fenxiangz.com/post/java/basic/2017-07-14_java_reference.html</link>
      <guid>https://blog.fenxiangz.com/post/java/basic/2017-07-14_java_reference.html</guid>
      <pubDate>Fri, 14 Jul 2017 03:51:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;在JDK 1.2以前的版本中，若一个对象不被任何变量引用，那么程序就无法再使用这个对象。也就是说，只有对象处于可触及（reachable）状态，程序才能使用它。从JDK 1.2版本开始，把对象的引用分为4种级别，从而使程序能更加灵活地控制对象的生命周期。这4种级别由高到低依</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E5%9F%BA%E7%A1%80/">Java 基础</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/">垃圾回收</category>
      
      <category domain="https://blog.fenxiangz.com/tags/Java%E5%BC%95%E7%94%A8/">Java引用</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/basic/2017-07-14_java_reference.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java Thread 线程知识整理（思维导图）</title>
      <link>https://blog.fenxiangz.com/post/java/basic/2017-04-18_java_thread_mind.html</link>
      <guid>https://blog.fenxiangz.com/post/java/basic/2017-04-18_java_thread_mind.html</guid>
      <pubDate>Tue, 18 Apr 2017 02:51:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;整理一份Java Thread的思维导图，持续更新中…&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.fenxiangz.com/mind/?url=examples/JavaThread.mymind&quot;&gt;https://blog.fenxiangz.com/m</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E5%9F%BA%E7%A1%80/">Java 基础</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/Java%E7%BA%BF%E7%A8%8B/">Java线程</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/">思维导图</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/basic/2017-04-18_java_thread_mind.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>为什么要与上0xff（&amp;0xff），有什么意义？</title>
      <link>https://blog.fenxiangz.com/post/java/advance/2017-04-18_java_0xff.html</link>
      <guid>https://blog.fenxiangz.com/post/java/advance/2017-04-18_java_0xff.html</guid>
      <pubDate>Mon, 17 Apr 2017 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;java.io.PipedInputStream#receive(int) 源码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;protected synchronized void receive(int b) throws IOException &amp;#123;
    checkSt</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E8%BF%9B%E9%98%B6/">Java 进阶</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/">二进制</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E5%8F%8D%E7%A0%81/">反码</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E8%A1%A5%E7%A0%81/">补码</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/advance/2017-04-18_java_0xff.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【战略收藏】Java知识体系</title>
      <link>https://blog.fenxiangz.com/post/java/advance/2017-03-28_java_acknowledge.html</link>
      <guid>https://blog.fenxiangz.com/post/java/advance/2017-03-28_java_acknowledge.html</guid>
      <pubDate>Mon, 27 Mar 2017 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;先看看这些程序员技能树，你掌握或了解哪些？OMG竟然有么多～～～震精！震精！！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./2017-03-28_java_acknowledge/1.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;&lt;img src=&quot;./2017-03-28_java_ac</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E8%BF%9B%E9%98%B6/">Java 进阶</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/">知识体系</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/advance/2017-03-28_java_acknowledge.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java书籍推荐</title>
      <link>https://blog.fenxiangz.com/post/java/advance/2016-12-09_java_books.html</link>
      <guid>https://blog.fenxiangz.com/post/java/advance/2016-12-09_java_books.html</guid>
      <pubDate>Thu, 08 Dec 2016 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;《深入理解 Java 虚拟机：JVM 高级特性与最佳实践》&lt;br&gt;《HotSpot 实战》&lt;br&gt;《Java 并发编程实战》&lt;br&gt;《java 多线程编程核心技术》&lt;br&gt;《Effective Java 中文版》&lt;br&gt;《深入分析 Java Web 技术内幕》&lt;br&gt;《大型</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E8%BF%9B%E9%98%B6/">Java 进阶</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E4%B9%A6%E7%B1%8D%E6%8E%A8%E8%8D%90/">书籍推荐</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/advance/2016-12-09_java_books.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java7 里 try-with-resources 分析</title>
      <link>https://blog.fenxiangz.com/post/java/basic/2016-11-18_try_with_resources.html</link>
      <guid>https://blog.fenxiangz.com/post/java/basic/2016-11-18_try_with_resources.html</guid>
      <pubDate>Sun, 27 Nov 2016 23:59:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;这个所谓的 try-with-resources，是个语法糖。实际上就是自动调用资源的 close() 函数。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E5%9F%BA%E7%A1%80/">Java 基础</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E5%BC%82%E5%B8%B8/">异常</category>
      
      <category domain="https://blog.fenxiangz.com/tags/Java%E5%BC%82%E5%B8%B8/">Java异常</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/basic/2016-11-18_try_with_resources.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>序列化和反序列化浅析</title>
      <link>https://blog.fenxiangz.com/post/java/advance/2016-11-24_java_serializable.html</link>
      <guid>https://blog.fenxiangz.com/post/java/advance/2016-11-24_java_serializable.html</guid>
      <pubDate>Wed, 23 Nov 2016 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;0-简介&quot;&gt;&lt;a href=&quot;#0-简介&quot; class=&quot;headerlink&quot; title=&quot;0.简介&quot;&gt;&lt;/a&gt;0.简介&lt;/h1&gt;&lt;p&gt;序列化和反序列化对于现代的程序员来说是一个既熟悉又陌生的概念。说熟悉是因为几乎每个程序员在工作中都直接或间接的使用过它，说陌</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E8%BF%9B%E9%98%B6/">Java 进阶</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E5%BA%8F%E5%88%97%E5%8C%96/">序列化</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/advance/2016-11-24_java_serializable.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java 内存分配和泄露</title>
      <link>https://blog.fenxiangz.com/post/java/advance/2016-11-03_java_memory_malloc.html</link>
      <guid>https://blog.fenxiangz.com/post/java/advance/2016-11-03_java_memory_malloc.html</guid>
      <pubDate>Thu, 03 Nov 2016 05:29:24 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;Java-内存分配策略&quot;&gt;&lt;a href=&quot;#Java-内存分配策略&quot; class=&quot;headerlink&quot; title=&quot;Java 内存分配策略&quot;&gt;&lt;/a&gt;Java 内存分配策略&lt;/h3&gt;&lt;p&gt;Java 程序运行时的内存分配策略有三种, 分别是静态分配, 栈式分</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E8%BF%9B%E9%98%B6/">Java 进阶</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/">内存分配</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/">内存泄露</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/advance/2016-11-03_java_memory_malloc.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>为什么 8 位有符号整数的范围为 “-128 ~ +127”</title>
      <link>https://blog.fenxiangz.com/post/java/advance/2016-10-25_number.html</link>
      <guid>https://blog.fenxiangz.com/post/java/advance/2016-10-25_number.html</guid>
      <pubDate>Wed, 26 Oct 2016 03:29:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;这是一个困惑了我几年的问题，它让我对现在的教科书和老师极其不满，从我 N 年前开始摸电脑时，就几乎在每一本 C++ 教科书上都说，8 位有符号的取值范围是 - 128 到 +127，为什么不是 - 127 到 +127 呢，后来的 java，int 的取值范围，再 32 位</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E8%BF%9B%E9%98%B6/">Java 进阶</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/">二进制</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/advance/2016-10-25_number.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>IntelliJ 各种快捷键</title>
      <link>https://blog.fenxiangz.com/post/util/2016-10-25_idea_shotcut.html</link>
      <guid>https://blog.fenxiangz.com/post/util/2016-10-25_idea_shotcut.html</guid>
      <pubDate>Tue, 25 Oct 2016 03:29:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;工欲善其事必先利其器，花一点时间，记录一下 Intellij 各种快捷键。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;窗口交互&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Alt + 1 显示 Project 窗口 ☆☆☆&lt;br&gt;Alt + 2 显示 Favorite 窗口&lt;br&gt;Alt + 3 </description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/idea_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/%E5%B7%A5%E5%85%B7/">工具</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Idea/">Idea</category>
      
      <category domain="https://blog.fenxiangz.com/tags/JavaIDE/">JavaIDE</category>
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      
      <comments>https://blog.fenxiangz.com/post/util/2016-10-25_idea_shotcut.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ThreadLocal 笔记</title>
      <link>https://blog.fenxiangz.com/post/java/basic/2016-10-25_threadlocal.html</link>
      <guid>https://blog.fenxiangz.com/post/java/basic/2016-10-25_threadlocal.html</guid>
      <pubDate>Tue, 25 Oct 2016 03:29:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ThreadLocal 不是用来解决共享对象访问的多线程访问问题，而是用于解决不同线程保持各自独立的一个对象。&lt;br&gt;典型的问题就是：当一个单例 A 持有某个属性对象 a.b 时，如果 a.b 在多个方法里面使用，就有可</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E5%9F%BA%E7%A1%80/">Java 基础</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/ThreadLocal/">ThreadLocal</category>
      
      <category domain="https://blog.fenxiangz.com/tags/Java%E7%BA%BF%E7%A8%8B/">Java线程</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/basic/2016-10-25_threadlocal.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于 HashMap （JDK 1.7）</title>
      <link>https://blog.fenxiangz.com/post/java/basic/2016-10-25_hashmap_jdk7.html</link>
      <guid>https://blog.fenxiangz.com/post/java/basic/2016-10-25_hashmap_jdk7.html</guid>
      <pubDate>Tue, 25 Oct 2016 03:20:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;JDK 1.8 对 HashMap 改进很多，1.8 中已经移除了 Entry 的这种实现方式了，改用了 Node，所以存储结构也发生了很大的变化，代码也从 1k 行膨胀到了 2k 行，这次梳理的是 1.7 的 HashMap 实现。1.8 下次再详细看看。&lt;/p&gt;
&lt;p&gt;</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E5%9F%BA%E7%A1%80/">Java 基础</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/HashMap/">HashMap</category>
      
      <category domain="https://blog.fenxiangz.com/tags/Java%E9%9B%86%E5%90%88/">Java集合</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/basic/2016-10-25_hashmap_jdk7.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://blog.fenxiangz.com/post/about.html</link>
      <guid>https://blog.fenxiangz.com/post/about.html</guid>
      <pubDate>Fri, 02 Nov 2012 18:00:00 GMT</pubDate>
      
      
      
      
      
      <category domain="https://blog.fenxiangz.com/tags/%E5%85%B3%E4%BA%8E%E6%88%91/">关于我</category>
      
      
      <comments>https://blog.fenxiangz.com/post/about.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>友情链接</title>
      <link>https://blog.fenxiangz.com/post/link.html</link>
      <guid>https://blog.fenxiangz.com/post/link.html</guid>
      <pubDate>Fri, 02 Nov 2012 17:00:00 GMT</pubDate>
      
      
      
      
      
      
      <comments>https://blog.fenxiangz.com/post/link.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://blog.fenxiangz.com/post/hello-world.html</link>
      <guid>https://blog.fenxiangz.com/post/hello-world.html</guid>
      <pubDate>Fri, 02 Nov 2012 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/helloworld.jpg" type="image"/>
      
      
      
      
      <category domain="https://blog.fenxiangz.com/tags/Hello-World/">Hello World</category>
      
      
      <comments>https://blog.fenxiangz.com/post/hello-world.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
