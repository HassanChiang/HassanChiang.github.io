<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>分享之</title>
    <link>https://blog.fenxiangz.com/</link>
    
    <image>
      <url>https://blog.fenxiangz.com/favico.png</url>
      <title>分享之</title>
      <link>https://blog.fenxiangz.com/</link>
    </image>
    
    <atom:link href="https://blog.fenxiangz.com/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>Share everything</description>
    <pubDate>Tue, 24 Nov 2020 11:55:43 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>从源码的角度再学「Thread」</title>
      <link>https://blog.fenxiangz.com/post/java/basic/2019-01-21_java_thread_source.html</link>
      <guid>https://blog.fenxiangz.com/post/java/basic/2019-01-21_java_thread_source.html</guid>
      <pubDate>Mon, 21 Jan 2019 01:46:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;原创： zhangshaolin &lt;strong&gt;张少林同学&lt;/strong&gt;&lt;br&gt;微信号: zhangshaolin_tonxue&lt;/p&gt;
&lt;p&gt;功能介绍 分享&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E5%9F%BA%E7%A1%80/">Java 基础</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/Java%E7%BA%BF%E7%A8%8B/">Java线程</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E6%BA%90%E7%A0%81/">源码</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/basic/2019-01-21_java_thread_source.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java8 lambda表达式10个示例</title>
      <link>https://blog.fenxiangz.com/post/java/basic/2017-11-10_java-lambda.html</link>
      <guid>https://blog.fenxiangz.com/post/java/basic/2017-11-10_java-lambda.html</guid>
      <pubDate>Fri, 10 Nov 2017 07:51:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Java 8 刚于几周前发布，日期是2014年3月18日，这次开创性的发布在Java社区引发了不少讨论，并让大家感到激动。特性之一便是随同发布的lambda表达式，它将允许我们将行为传到函数里。在Java 8之前，如果想将行为传入函数，仅有的选择就是匿名类，需要6行代码。而</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E5%9F%BA%E7%A1%80/">Java 基础</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/">lambda表达式</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/basic/2017-11-10_java-lambda.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java 引用</title>
      <link>https://blog.fenxiangz.com/post/java/basic/2017-07-14_java_reference.html</link>
      <guid>https://blog.fenxiangz.com/post/java/basic/2017-07-14_java_reference.html</guid>
      <pubDate>Fri, 14 Jul 2017 03:51:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;在JDK 1.2以前的版本中，若一个对象不被任何变量引用，那么程序就无法再使用这个对象。也就是说，只有对象处于可触及（reachable）状态，程序才能使用它。从JDK 1.2版本开始，把对象的引用分为4种级别，从而使程序能更加灵活地控制对象的生命周期。这4种级别由高到低依</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E5%9F%BA%E7%A1%80/">Java 基础</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/">垃圾回收</category>
      
      <category domain="https://blog.fenxiangz.com/tags/Java%E5%BC%95%E7%94%A8/">Java引用</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/basic/2017-07-14_java_reference.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java Thread 线程知识整理（思维导图）</title>
      <link>https://blog.fenxiangz.com/post/java/basic/2017-04-18_java_thread_mind.html</link>
      <guid>https://blog.fenxiangz.com/post/java/basic/2017-04-18_java_thread_mind.html</guid>
      <pubDate>Tue, 18 Apr 2017 02:51:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;整理一份Java Thread的思维导图，持续更新中…&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.fenxiangz.com/mind/?url=examples/JavaThread.mymind&quot;&gt;https://blog.fenxiangz.com/m</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E5%9F%BA%E7%A1%80/">Java 基础</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/Java%E7%BA%BF%E7%A8%8B/">Java线程</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/">思维导图</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/basic/2017-04-18_java_thread_mind.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java7 里 try-with-resources 分析</title>
      <link>https://blog.fenxiangz.com/post/java/basic/2016-11-18_try_with_resources.html</link>
      <guid>https://blog.fenxiangz.com/post/java/basic/2016-11-18_try_with_resources.html</guid>
      <pubDate>Sun, 27 Nov 2016 23:59:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;这个所谓的 try-with-resources，是个语法糖。实际上就是自动调用资源的 close() 函数。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E5%9F%BA%E7%A1%80/">Java 基础</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E5%BC%82%E5%B8%B8/">异常</category>
      
      <category domain="https://blog.fenxiangz.com/tags/Java%E5%BC%82%E5%B8%B8/">Java异常</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/basic/2016-11-18_try_with_resources.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>为什么 8 位有符号整数的范围为 “-128 ~ +127”</title>
      <link>https://blog.fenxiangz.com/post/java/advance/2016-10-25_number.html</link>
      <guid>https://blog.fenxiangz.com/post/java/advance/2016-10-25_number.html</guid>
      <pubDate>Wed, 26 Oct 2016 03:29:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;这是一个困惑了我几年的问题，它让我对现在的教科书和老师极其不满，从我 N 年前开始摸电脑时，就几乎在每一本 C++ 教科书上都说，8 位有符号的取值范围是 - 128 到 +127，为什么不是 - 127 到 +127 呢，后来的 java，int 的取值范围，再 32 位</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E8%BF%9B%E9%98%B6/">Java 进阶</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/">二进制</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/advance/2016-10-25_number.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>IntelliJ 各种快捷键</title>
      <link>https://blog.fenxiangz.com/post/util/2016-10-25_idea_shotcut.html</link>
      <guid>https://blog.fenxiangz.com/post/util/2016-10-25_idea_shotcut.html</guid>
      <pubDate>Tue, 25 Oct 2016 03:29:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;工欲善其事必先利其器，花一点时间，记录一下 Intellij 各种快捷键。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;窗口交互&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Alt + 1 显示 Project 窗口 ☆☆☆&lt;br&gt;Alt + 2 显示 Favorite 窗口&lt;br&gt;Alt + 3 </description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/idea_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/%E5%B7%A5%E5%85%B7/">工具</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Idea/">Idea</category>
      
      <category domain="https://blog.fenxiangz.com/tags/JavaIDE/">JavaIDE</category>
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      
      <comments>https://blog.fenxiangz.com/post/util/2016-10-25_idea_shotcut.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ThreadLocal 笔记</title>
      <link>https://blog.fenxiangz.com/post/java/basic/2016-10-25_threadlocal.html</link>
      <guid>https://blog.fenxiangz.com/post/java/basic/2016-10-25_threadlocal.html</guid>
      <pubDate>Tue, 25 Oct 2016 03:29:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ThreadLocal 不是用来解决共享对象访问的多线程访问问题，而是用于解决不同线程保持各自独立的一个对象。&lt;br&gt;典型的问题就是：当一个单例 A 持有某个属性对象 a.b 时，如果 a.b 在多个方法里面使用，就有可</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E5%9F%BA%E7%A1%80/">Java 基础</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/ThreadLocal/">ThreadLocal</category>
      
      <category domain="https://blog.fenxiangz.com/tags/Java%E7%BA%BF%E7%A8%8B/">Java线程</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/basic/2016-10-25_threadlocal.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于 HashMap （JDK 1.7）</title>
      <link>https://blog.fenxiangz.com/post/java/basic/2016-10-25_hashmap_jdk7.html</link>
      <guid>https://blog.fenxiangz.com/post/java/basic/2016-10-25_hashmap_jdk7.html</guid>
      <pubDate>Tue, 25 Oct 2016 03:20:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;JDK 1.8 对 HashMap 改进很多，1.8 中已经移除了 Entry 的这种实现方式了，改用了 Node，所以存储结构也发生了很大的变化，代码也从 1k 行膨胀到了 2k 行，这次梳理的是 1.7 的 HashMap 实现。1.8 下次再详细看看。&lt;/p&gt;
&lt;p&gt;</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/java/basic/java_logo.png" type="image"/>
      
      
      
      <category domain="https://blog.fenxiangz.com/categories/Java-%E5%9F%BA%E7%A1%80/">Java 基础</category>
      
      
      <category domain="https://blog.fenxiangz.com/tags/Java/">Java</category>
      
      <category domain="https://blog.fenxiangz.com/tags/HashMap/">HashMap</category>
      
      <category domain="https://blog.fenxiangz.com/tags/Java%E9%9B%86%E5%90%88/">Java集合</category>
      
      
      <comments>https://blog.fenxiangz.com/post/java/basic/2016-10-25_hashmap_jdk7.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://blog.fenxiangz.com/post/about.html</link>
      <guid>https://blog.fenxiangz.com/post/about.html</guid>
      <pubDate>Fri, 02 Nov 2012 18:00:00 GMT</pubDate>
      
      
      
      
      
      <category domain="https://blog.fenxiangz.com/tags/%E5%85%B3%E4%BA%8E%E6%88%91/">关于我</category>
      
      
      <comments>https://blog.fenxiangz.com/post/about.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>友情链接</title>
      <link>https://blog.fenxiangz.com/post/link.html</link>
      <guid>https://blog.fenxiangz.com/post/link.html</guid>
      <pubDate>Fri, 02 Nov 2012 17:00:00 GMT</pubDate>
      
      
      
      
      
      
      <comments>https://blog.fenxiangz.com/post/link.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://blog.fenxiangz.com/post/hello-world.html</link>
      <guid>https://blog.fenxiangz.com/post/hello-world.html</guid>
      <pubDate>Fri, 02 Nov 2012 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      <enclosure url="https://blog.fenxiangz.com/images/helloworld.jpg" type="image"/>
      
      
      
      
      <category domain="https://blog.fenxiangz.com/tags/Hello-World/">Hello World</category>
      
      
      <comments>https://blog.fenxiangz.com/post/hello-world.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
