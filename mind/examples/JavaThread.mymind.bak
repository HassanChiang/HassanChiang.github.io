{
	"root": {
		"id": "zvrfsugq",
		"text": "Java Thread",
		"layout": "graph-right",
		"children": [
			{
				"id": "ddeahgbw",
				"text": "概述：进程中独立运行的子任务就是一个线程。线程可以有效地降低程<br>序的开发和维护等成本，同时提升复杂应用程序的性能。",
				"side": "right",
				"layout": "graph-left"
			},
			{
				"id": "wbrdpthj",
				"text": "创建线程：3种方式",
				"side": "right",
				"children": [
					{
						"id": "mngjewwz",
						"text": "使用实现Runnable接口的类，实例化然后传入Thread构造函数"
					},
					{
						"id": "iizocwbq",
						"text": "继承Thread类"
					},
					{
						"id": "hhzlhszi",
						"text": "使用Executor来创建"
					}
				]
			},
			{
				"id": "spupxhey",
				"text": "线程的状态：Thread.State",
				"side": "left",
				"children": [
					{
						"id": "gdxayqte",
						"text": "NEW",
						"children": [
							{
								"id": "peqcxypm",
								"text": "<span style=\"line-height: 20.8px;\">\"Thread t = new Thread()\"，t就是一个处于NEW状态的线程</span>"
							}
						]
					},
					{
						"id": "sgfctnnc",
						"text": "<span style=\"font-size: 17.6px; line-height: 22.88px;\">RUNNABLE</span>",
						"children": [
							{
								"id": "hgeizeir",
								"text": "<span style=\"line-height: 22.88px;\"><br>new出来线程，调用start()方法即处于RUNNABLE状态了。</span><br style=\"line-height: 22.88px;\"><span style=\"line-height: 22.88px;\">处于RUNNABLE状态的线程可能正在Java虚拟机中运行，也可能正在等待处理器的资源，</span><br style=\"line-height: 22.88px;\"><span style=\"line-height: 22.88px;\">因为一个线程必须获得CPU的资源后，才可以运行其run()方法中的内容，否则排队等待</span>"
							}
						]
					},
					{
						"id": "axwkovpo",
						"text": "BLOCKED",
						"children": [
							{
								"id": "sjswnjdf",
								"text": "<br>如果某一线程正在等待监视器锁，以便进入一个同步的块/方法，那么这个线程的状态就是阻塞BLOCKED"
							}
						]
					},
					{
						"id": "qbgeerec",
						"text": "WAITING",
						"children": [
							{
								"id": "eyyoefbw",
								"text": "<br>如果某一线程正在等待监视器锁，以便进入一个同步的块/方法，那么这个线程的状态就是阻塞BLOCKED"
							}
						]
					},
					{
						"id": "ywgwbmjg",
						"text": "WAITING",
						"children": [
							{
								"id": "kqyqbxsb",
								"text": "<br>某一线程因为调用带有指定正等待时间的Object的wait()方法、Thread的join()方法、Thread的sleep()方法、<br>LockSupport的parkNanos()方法、LockSupport的parkUntil()方法，就会处于超时等待TIMED_WAITING状态"
							}
						]
					},
					{
						"id": "dqszzwfx",
						"text": "TERMINATED",
						"children": [
							{
								"id": "ruabepso",
								"text": "<br>线程调用终止或者run()方法执行结束后，线程即处于终止状态。处于终止状态的线程不具备继续运行的能力"
							}
						]
					}
				]
			},
			{
				"id": "xhfuzhuw",
				"text": "线程之间通信：使用Object对象中的三个方法：<br>wait，notify，notifyAll，<br>这三个方法调用之前，线程必须获得该对象的锁，<br>因此只能在同步方法/同步代码块中调用这些方法。<br>",
				"side": "right",
				"children": [
					{
						"id": "amzfrwox",
						"text": "<span style=\"font-size: 19.2px; line-height: 24.96px;\">wait()</span>",
						"children": [
							{
								"id": "ceuibxni",
								"text": "<br>wait()的作用是使当前执行代码的线程进行等待，<br>将当前线程置入\"预执行队列\"中，并且wait()所在的<br>代码处停止执行，直到接到通知或被中断。"
							}
						]
					},
					{
						"id": "joasgndr",
						"text": "<span style=\"font-size: 19.2px; line-height: 24.96px;\">notify()</span>",
						"children": [
							{
								"id": "ejmhjdll",
								"text": "<div><br>notify()的作用是，如果有多个线程等待，那么线程规划器随机挑选</div><div>出一个wait的线程，对其发出通知notify()，并使它等待获取该对象</div><div>的对象锁。注意\"等待获取该对象的对象锁\"，这意味着，即使收到了通</div><div>知，wait的线程也不会马上获取对象锁，必须等待notify()方法的线</div><div>程释放锁才可以。&nbsp;</div>"
							}
						]
					},
					{
						"id": "nikrzwbg",
						"text": "<span style=\"font-size: 19.2px; line-height: 24.96px;\">notifyAll()</span>"
					},
					{
						"id": "vcnybght",
						"text": "同步实现方式",
						"shape": "box",
						"children": [
							{
								"id": "tzourdlr",
								"text": "<br>在方法上加synchronized ，如：<br>public synchronized void n() {<span style=\"line-height: 1.3em; font-size: 100%;\">&nbsp; notify(); &nbsp;</span><span style=\"line-height: 1.3em; font-size: 100%;\">}</span><br>"
							},
							{
								"id": "mcjedkuf",
								"text": "<br>使用同步代码块，如：<br>public void n() { &nbsp;<span style=\"line-height: 1.3em; font-size: 80%;\">synchronized (this ) {</span><span style=\"line-height: 1.3em; font-size: 80%;\">&nbsp; notify();</span><span style=\"line-height: 1.3em; font-size: 80%;\">&nbsp; }</span><span style=\"line-height: 1.3em; font-size: 80%;\">&nbsp; &nbsp; }</span><br>"
							}
						]
					},
					{
						"id": "rsrnskdg",
						"text": "<span style=\"font-size: 12.8px; line-height: 16.64px;\">总结</span>",
						"shape": "box",
						"children": [
							{
								"id": "oercxlrq",
								"text": "<br style=\"font-size: 12.8px; line-height: 16.64px;\"><span style=\"font-size: 12.8px; line-height: 16.64px;\">wait()</span><span style=\"font-size: 12.8px; line-height: 16.64px;\">释放共享资源的锁，</span><span style=\"font-size: 12.8px; line-height: 16.64px;\">使线程停止运行;</span><br style=\"font-size: 12.8px; line-height: 16.64px;\"><span style=\"font-size: 12.8px; line-height: 16.64px;\">notify()</span><span style=\"font-size: 12.8px; line-height: 16.64px;\">随机唤醒等待队列中</span><span style=\"font-size: 12.8px; line-height: 16.64px;\">等待同一共享资源的<br>一个线程，</span><span style=\"font-size: 12.8px; line-height: 16.64px;\">使停止运行的线程进入可运行状态；</span><br style=\"font-size: 12.8px; line-height: 16.64px;\"><span style=\"font-size: 12.8px; line-height: 16.64px;\">notifyAll()方法可以使所有正在等待队列中等待同一</span><br style=\"font-size: 12.8px; line-height: 16.64px;\"><span style=\"font-size: 12.8px; line-height: 16.64px;\">共享资源的全部线程从等待状态退出，进入可运行状态&nbsp;</span><br style=\"font-size: 12.8px; line-height: 16.64px;\">"
							}
						]
					}
				]
			},
			{
				"id": "xqwpetob",
				"text": "Thread实例方法",
				"side": "right",
				"color": "#e33",
				"children": [
					{
						"id": "bxptvysv",
						"text": "start()",
						"children": [
							{
								"id": "yxhteqxj",
								"text": "<br>作用讲得直白点就是通知\"线程规划器\"，此线程可以运行了，正在等待CPU调用线程对象得run()方法，产生一个异步执行的效果。"
							}
						]
					},
					{
						"id": "hjaulsvz",
						"text": "run()",
						"children": [
							{
								"id": "eqctmdtw",
								"text": "<br>如果手动直接调用，对于线程是没有任何意义的。只是一次方法调用，和启动线程无关！"
							}
						]
					},
					{
						"id": "uzzhxugp",
						"text": "isAlive()",
						"children": [
							{
								"id": "stujmsaf",
								"text": "<br>测试线程是否处于活动状态，只要线程启动且没有终止，方法返回的就是true"
							}
						]
					},
					{
						"id": "fvajuqye",
						"text": "getId()",
						"children": [
							{
								"id": "awjxnjso",
								"text": "<br>获取线程ID，这个线程ID是在new&nbsp;<span style=\"font-size: 17.6px; line-height: 22.88px;\">Thread</span>的时候自动生成的。Thread.nextThreadNum()方法<br>"
							}
						]
					},
					{
						"id": "bnbyhgup",
						"text": "getName()",
						"children": [
							{
								"id": "nfttyumc",
								"text": "<br>获取线程名称&nbsp;<br>"
							}
						]
					},
					{
						"id": "jvftlykt",
						"text": "getPriority()、<span style=\"font-size: 17.6px; line-height: 22.88px;\">setPriority(int newPriority)</span>",
						"children": [
							{
								"id": "yfrhddqh",
								"text": "<br>获取线程优先级，默认值是5，Thread.NORM_PRIORITY<br>"
							}
						]
					},
					{
						"id": "jhhixdkp",
						"text": "isDaemon()、<span style=\"font-size: 17.6px; line-height: 22.88px;\">setDaemon(boolean on)</span>",
						"children": [
							{
								"id": "erabjdry",
								"text": "<br>Java中有两种线程，一种是用户线程，一种是守护线程。<br>守护线程是一种特殊的线程，它的作用是为其他线程的<br>运行提供便利的服务，最典型的应用便是GC线程。<br>如果进程中不存在非守护线程了，那么守护线程自动<br>销毁，因为没有存在的必要，为别人服务，<br>结果服务的对象都没了，当然就销毁了。<br>setDaemon(true)必须在线程start()之前，默认是false。<br>"
							}
						]
					},
					{
						"id": "xvaqsypj",
						"text": "interrupt()<br>",
						"children": [
							{
								"id": "ldhxbdgc",
								"text": "<span style=\"font-size: 17.6px; line-height: 22.88px;\">作用：a.</span><span style=\"line-height: 20.8px;\">interrupt()时，给已经阻塞的</span><span style=\"font-size: 17.6px; line-height: 22.88px;\">线程</span><span style=\"line-height: 20.8px;\">a</span><span style=\"font-size: 17.6px; line-height: 22.88px;\">一个中断信号，这样a线程就得以退出阻塞状态。（没有被阻塞的线程，调用interrupt()方法是不起作用的）</span><br>"
							}
						]
					},
					{
						"id": "fiyfjhua",
						"text": "<span style=\"font-size: 17.6px; line-height: 20.8px;\">isInterrupted()</span>",
						"children": [
							{
								"id": "fbzkrhtb",
								"text": "检测this线程是否已经被中断"
							}
						]
					},
					{
						"id": "oincdzjk",
						"text": "join()",
						"children": [
							{
								"id": "xfykczel",
								"text": "<br>join()方法会使“调用join()方法的线程”所在的线程无限阻塞，直到调用join()方法的线程销毁为止。<br>join()方法的一个重点是要区分出和sleep()方法的区别。join(2000)也是可以的，表示调用join()方法<br>所在的线程最多等待2000ms，两者的区别在于：sleep(2000)不释放锁，join(2000)释放锁，<br>因为join()方法内部使用的是wait()，因此会释放锁。看一下join(2000)的源码就知道了，join()其实<br>和join(2000)一样，无非是join(0)而已<br> "
							}
						]
					}
				]
			},
			{
				"id": "ceegpgrd",
				"text": "Thread静态方法",
				"side": "left",
				"children": [
					{
						"id": "amvelrie",
						"text": "currentThread()",
						"children": [
							{
								"id": "ynglqwyr",
								"text": "<br>对当前正在执行线程对象的引用"
							}
						]
					},
					{
						"id": "byxppmez",
						"text": "sleep(long millis)",
						"children": [
							{
								"id": "eruffcrx",
								"text": "<br>休眠，但“不丢失任何监视器的所属权”，直白点讲，就是不让出CPU资源"
							}
						]
					},
					{
						"id": "qqeqomhe",
						"text": "interrupted()",
						"children": [
							{
								"id": "ualoesho",
								"text": "检测当前线程是否已经被中断，同时清除当前线程的中断状态"
							}
						]
					},
					{
						"id": "kifxtnjj",
						"text": "yield()",
						"children": [
							{
								"id": "dksaaogn",
								"text": "<br>暂停当前执行的线程对象，并执行其他线程。这个暂停是会<br>放弃CPU资源的，并且放弃CPU的时间不确定，有可能刚放弃，<br>就获得CPU资源了，也有可能放弃好一会儿，才会被CPU执行。&nbsp;"
							}
						]
					}
				]
			}
		]
	}
}
